// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("borrower") // "librarian" or "borrower"
  status    String   @default("active") // "active" or "inactive"
  createdAt DateTime @default(now())

  loans Loan[]
  fines Fine[]

  @@map("users")
}

model Book {
  id              String   @id @default(cuid())
  title           String
  author          String
  isbn            String?  @unique
  category        String?
  totalCopies     Int      @default(1)
  availableCopies Int      @default(1)
  createdAt       DateTime @default(now())

  loans Loan[]

  @@map("books")
}

model Loan {
  id         String    @id @default(cuid())
  userId     String
  bookId     String
  loanedAt   DateTime  @default(now())
  dueAt      DateTime
  returnedAt DateTime?
  status     String    @default("active") // "active", "returned", "overdue"

  user  User   @relation(fields: [userId], references: [id])
  book  Book   @relation(fields: [bookId], references: [id])
  fines Fine[]

  @@map("loans")
}

model Fine {
  id        String   @id @default(cuid())
  userId    String
  loanId    String
  amount    Float
  status    String   @default("unpaid") // "unpaid", "paid"
  reason    String   @default("overdue")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  loan Loan @relation(fields: [loanId], references: [id])

  @@map("fines")
}
